  header(network.h)
  init(network_init)
 header(core/periodic.h)
 init(periodic_init)
  header(core/vfs/vfs.h)
  block(Analog/Digital Conversion ([[ADC]]))
  header(hardware/adc/adc.h)
  init(adc_init)
  block(Miscelleanous)
  ecmd_feature(d, "d ", ADDR, Dump the memory at ADDR (16 bytes).)
  ecmd_feature(fuse, "fuse",,Display current fuse settings)
  ecmd_feature(hostname, "hostname",,Display hostname.)
  block(Resetting the controller)
  ecmd_feature(reset, "reset",,Reset the Ethersex.)
  ecmd_ifndef(TEENSY_SUPPORT)
    ecmd_feature(wdreset, "wdreset",,Go into endless loop to trigger a watchdog timeout.)
  ecmd_endif()
  header(hardware/ethernet/enc28j60.h)
  ifdef(`conf_IPV6', `ifdef(`conf_IPV6_STATIC', `', `timer(50, `ethernet_config_periodic()')')')
  header(hardware/ethernet/enc28j60.h)
  net_init(init_enc28j60)
  mainloop(network_process)
  timer(50, enc28j60_periodic())
  header(hardware/onewire/onewire.h)
  init(onewire_init)
  ifdef(`conf_ONEWIRE_POLLING',`timer(50, ow_periodic())')
  dnl ems_init call must be done after network_init (according to earlier
  dnl comments.  Therefore we initialize via net_init and control the
  dnl order via the Makefile.

  header(protocols/ems/ems.h)
  net_init(ems_init)
  timer(5, ems_periodic_timeout())
  net_init(ems_net_init)
  timer(5, ems_uart_periodic())
  header(protocols/ems/ems.h)
  mainloop(ems_process)
  header(protocols/uip/uip.h)
  header(protocols/uip/uip_router.h)
  ifdef(`conf_TCP', `timer(10, `uip_tcp_timer()')')
  ifdef(`conf_UDP', `timer(10, `uip_udp_timer()')')
  header(protocols/uip/uip_arp.h)
  ifdef(`conf_BOOTLOADER', `', `ifdef(`conf_TEENSY', `', `timer(500, `uip_arp_timer()')')')
  header(protocols/ecmd/via_tcp/ecmd_net.h)
  net_init(ecmd_net_init)

  state_header(protocols/ecmd/via_tcp/ecmd_state.h)
  state_tcp(struct ecmd_connection_state_t ecmd)
  header(services/clock/clock.h)
  init(clock_init)
  timer(1, clock_tick())
  ifdef(`conf_NTP', `timer(50, clock_periodic())')
  header(services/httpd/httpd.h)
  net_init(httpd_init)

  state_header(services/httpd/httpd_state.h)
  state_tcp(struct httpd_connection_state_t httpd)
  ecmd_feature(io, "io")
  ecmd_feature(adc_get, "adc get", [CHANNEL], Get the ADC value in hex of CHANNEL or if no channel set of all channels.)
  ecmd_ifdef(ADC_VOLTAGE_SUPPORT)
    ecmd_feature(adc_vget, "adc vget", [CHANNEL], Get the ADC value in volt of CHANNEL or if no channel set of all channels.)
    ecmd_feature(adc_vref, "adc vref", [VOLTAGE], Get/Set ADC reference voltage calibration.)
  ecmd_endif()
  block(Network configuration)
  ecmd_feature(mac, "mac",[xx:xx:xx:xx:xx:xx],Display/Set the MAC address.)
  ecmd_ifdef(DEBUG_ENC28J60)
    ecmd_feature(enc_dump, "enc dump", , Dump the internal state of the enc to serial)
  ecmd_endif()
    
  block([[Dallas_1-wire_Bus]])
  ecmd_ifdef(ONEWIRE_DETECT_SUPPORT)
    ecmd_feature(onewire_list, "1w list", , Return a list of the connected onewire devices)
  ecmd_endif()
  ecmd_ifdef(ONEWIRE_NAMING_SUPPORT)
    ecmd_feature(onewire_get, "1w get", DEVICE, Return temperature value of onewire device (provide 64-bit ID as 16-hex-digits or sensor name))
  ecmd_else()
    ecmd_feature(onewire_get, "1w get", DEVICE, Return temperature value of onewire device (provide 64-bit ID as 16-hex-digits))
  ecmd_endif()
  ecmd_feature(onewire_convert, "1w convert", DEVICE, Trigger temperature conversion of either DEVICE or all connected devices)
  ecmd_ifdef(ONEWIRE_NAMING_SUPPORT)
    ecmd_feature(onewire_name_set, "1w name set", ID DEVICE NAME, Assign a name to/from an device address)
    ecmd_feature(onewire_name_clear, "1w name clear", ID, Delete a name mapping)
    ecmd_feature(onewire_name_list, "1w name list", , Return a list of mapped device names)
    ecmd_feature(onewire_name_save, "1w name save", , Save name mappings to EEPROM)
  ecmd_endif()
  block([[EMS]] commands)
  ecmd_ifdef(EMS_DEBUG_STATS)
    ecmd_feature(ems_stats, "ems stats", , Report statistic counters)
  ecmd_endif()
  block(Network configuration)
  ecmd_ifndef(TEENSY_SUPPORT)
    ecmd_ifdef(UIP_SUPPORT)
      ecmd_ifndef(IPV6_SUPPORT)
	ecmd_feature(netmask, "netmask",[IP],Display/Set the network mask.)
      ecmd_endif()

      ecmd_feature(ip, "ip",[IP],Display/Set the IP address.)
      ecmd_feature(gw, "gw",[IP],Display/Set the address of the default router.)
    ecmd_endif()
  ecmd_endif()
  block([[Am_Puls_der_Zeit|Clock]])
  ecmd_feature(date, "date",, Print the current date.)
  ecmd_ifdef(DCF77_SUPPORT)
    ecmd_feature(lastdcf, "lastdcf",, Print when last valid DCF signal was received.)
  ecmd_endif()
  block([[Am_Puls_der_Zeit|Clock]])
  ecmd_feature(time, "time",[UNIXTIME], Display/Set the current time in seconds since January 1st 1970.)
